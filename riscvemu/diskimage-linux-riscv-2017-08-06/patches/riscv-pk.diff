Index: bbl/bbl.lds
===================================================================
--- bbl/bbl.lds	(revision 475)
+++ bbl/bbl.lds	(working copy)
@@ -43,12 +43,10 @@
   /*--------------------------------------------------------------------*/
   /* HTIF, isolated onto separate page                                  */
   /*--------------------------------------------------------------------*/
+  tohost = 0x40008000;
+  fromhost = 0x40008008;
+
   . = ALIGN(0x1000);
-  .htif :
-  {
-    *(.htif)
-  }
-  . = ALIGN(0x1000);
 
   /*--------------------------------------------------------------------*/
   /* Initialized data segment                                           */
Index: configure
===================================================================
--- configure	(revision 475)
+++ configure	(working copy)
@@ -644,7 +644,6 @@
 docdir
 oldincludedir
 includedir
-runstatedir
 localstatedir
 sharedstatedir
 sysconfdir
@@ -728,7 +727,6 @@
 sysconfdir='${prefix}/etc'
 sharedstatedir='${prefix}/com'
 localstatedir='${prefix}/var'
-runstatedir='${localstatedir}/run'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
 docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
@@ -981,15 +979,6 @@
   | -silent | --silent | --silen | --sile | --sil)
     silent=yes ;;
 
-  -runstatedir | --runstatedir | --runstatedi | --runstated \
-  | --runstate | --runstat | --runsta | --runst | --runs \
-  | --run | --ru | --r)
-    ac_prev=runstatedir ;;
-  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \
-  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \
-  | --run=* | --ru=* | --r=*)
-    runstatedir=$ac_optarg ;;
-
   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
@@ -1127,7 +1116,7 @@
 for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
 		datadir sysconfdir sharedstatedir localstatedir includedir \
 		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
-		libdir localedir mandir runstatedir
+		libdir localedir mandir
 do
   eval ac_val=\$$ac_var
   # Remove trailing slashes.
@@ -1280,7 +1269,6 @@
   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
-  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
   --libdir=DIR            object code libraries [EPREFIX/lib]
   --includedir=DIR        C header files [PREFIX/include]
   --oldincludedir=DIR     C header files for non-gcc [/usr/include]
@@ -4078,8 +4066,8 @@
 case "${BUILD_32BIT}" in
   yes|default)
 	echo "Building 32-bit pk"
-	CFLAGS="$default_CFLAGS -m32"
-	LDFLAGS="-m32"
+	CFLAGS="$default_CFLAGS -march=rv32gc -mabi=ilp32"
+	LDFLAGS="-march=rv32gc -mabi=ilp32"
 	install_subdir="riscv32-unknown-elf"
 	;;
   *)
Index: configure.ac
===================================================================
--- configure.ac	(revision 475)
+++ configure.ac	(working copy)
@@ -88,8 +88,8 @@
 case "${BUILD_32BIT}" in
   yes|default)
 	echo "Building 32-bit pk"
-	CFLAGS="$default_CFLAGS -m32"
-	LDFLAGS="-m32"
+	CFLAGS="$default_CFLAGS -march=rv32gc -mabi=ilp32"
+	LDFLAGS="-march=rv32gc -mabi=ilp32"
 	install_subdir="riscv32-unknown-elf"
 	;;
   *)
Index: machine/htif.c
===================================================================
--- machine/htif.c	(revision 475)
+++ machine/htif.c	(working copy)
@@ -2,8 +2,8 @@
 #include "atomic.h"
 #include "mtrap.h"
 
-volatile uint64_t tohost __attribute__((section(".htif")));
-volatile uint64_t fromhost __attribute__((section(".htif")));
+volatile extern uint64_t tohost;
+volatile extern uint64_t fromhost;
 volatile int htif_console_buf;
 static spinlock_t htif_lock = SPINLOCK_INIT;
 
Index: machine/htif.h
===================================================================
--- machine/htif.h	(revision 475)
+++ machine/htif.h	(working copy)
@@ -3,14 +3,9 @@
 
 #include <stdint.h>
 
-#if __riscv_xlen == 64
 # define TOHOST_CMD(dev, cmd, payload) \
   (((uint64_t)(dev) << 56) | ((uint64_t)(cmd) << 48) | (uint64_t)(payload))
-#else
-# define TOHOST_CMD(dev, cmd, payload) ({ \
-  if ((dev) || (cmd)) __builtin_trap(); \
-  (payload); })
-#endif
+
 #define FROMHOST_DEV(fromhost_value) ((uint64_t)(fromhost_value) >> 56)
 #define FROMHOST_CMD(fromhost_value) ((uint64_t)(fromhost_value) << 8 >> 56)
 #define FROMHOST_DATA(fromhost_value) ((uint64_t)(fromhost_value) << 16 >> 16)
Index: machine/mentry.S
===================================================================
--- machine/mentry.S	(revision 475)
+++ machine/mentry.S	(working copy)
@@ -210,6 +210,47 @@
   jal trap_from_machine_mode
   j restore_regs
 
+#define HTIF_TOHOST   0x40008000
+
+putstring:
+  li a2, HTIF_TOHOST
+  li a3, (1 << 24) | (1 << 16)
+1:      
+  lbu a1, (a0)
+  beqz a1, 2f
+/* Note: we use 32 bit accesses to work in all base isa modes */
+  sw a1, 0(a2)
+  sw a3, 4(a2)
+/* wait until the char is handled */
+3:      
+  lw a1, 0(a2)
+  lw a4, 4(a2)
+  or a1, a1, a4
+  bnez a1, 3b
+  addi a0, a0, 1
+  j 1b
+2:
+  ret
+fatal_error:
+  jal putstring
+  # exit the emulator if possible
+  li a2, HTIF_TOHOST
+  li a1, 1
+  sw a1, 0(a2)
+  sw zero, 4(a2)
+1:  
+  wfi
+  j 1b
+
+rv32_expected_str:
+  .asciz "Must run this program on a 32 bit RISCV CPU - aborting\n"
+  .align 2
+rv64_expected_str:
+  .asciz "Must run this program on a 64 bit RISCV CPU - aborting\n"
+rv128_detected_str:
+  .asciz "128 bit RISCV CPU detected: setting XLEN to 64 bits\n"
+  .align 2
+  
 do_reset:
   li x1, 0
   li x2, 0
@@ -245,6 +286,41 @@
   li x31, 0
   csrw mscratch, x0
 
+  # check MXL value and abort if it is not what we expect
+  mv s0, a0
+  mv s1, a1
+  csrr a0, misa
+  bgez a0, misa_rv32
+#if __riscv_xlen == 32
+  la a0, rv32_expected_str
+  j fatal_error
+#else
+  slli a0, a0, 1
+  bgez a0, misa_ok
+  # we are on a 128 bit CPU: we force MXL to 64 bit as a test
+  la a0, rv128_detected_str
+  jal putstring
+  li a0, 1
+  li a1, 126
+  # cannot use slli because no 128 bit support in gas
+  sll a0, a0, a1 
+  csrc misa, a0
+  # also set MSTATUS.SXL and MSTATUS.UXL to 64 bits
+  li a0, (3 << 32) | (3 << 34)
+  csrs mstatus, a0
+  li a0, (1 << 32) | (1 << 34)
+  csrc mstatus, a0
+  j misa_ok
+#endif    
+misa_rv32:
+#if __riscv_xlen == 64
+  la a0, rv64_expected_str
+  j fatal_error
+#endif
+misa_ok:
+  mv a0, s0
+  mv a1, s1
+
   # write mtvec and make sure it sticks
   la t0, trap_vector
   csrw mtvec, t0
Index: machine/mtrap.c
===================================================================
--- machine/mtrap.c	(revision 475)
+++ machine/mtrap.c	(working copy)
@@ -33,8 +33,13 @@
 
 void putstring(const char* s)
 {
-  while (*s)
-    mcall_console_putchar(*s++);
+    int c;
+    while (*s) {
+        c = *s++;
+        if (c == '\n')
+            mcall_console_putchar('\r');
+        mcall_console_putchar(c);
+    }
 }
 
 void printm(const char* s, ...)
Index: pk/pk.lds
===================================================================
--- pk/pk.lds	(revision 475)
+++ pk/pk.lds	(working copy)
@@ -46,7 +46,10 @@
   . = ALIGN(0x1000);
   .htif :
   {
-    *(.htif)
+    tohost = . ;
+    . = . + 64;
+    fromhost = . ;
+    . = . + 64;
   }
   . = ALIGN(0x1000);
 
